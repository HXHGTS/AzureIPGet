name: Compile Rainbow Six Siege Asian Server filter geoip source file

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  geoip-r6s-compile:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Necessary Tools
      run: |
        sudo apt-get install -y jq wget curl gzip

    - name: Install mihomo
      run: |
        wget -O mihomo-linux-amd64-alpha-8298489.gz https://github.com/MetaCubeX/mihomo/releases/download/Prerelease-Alpha/mihomo-linux-amd64-alpha-8298489.gz
        gzip -d mihomo-linux-amd64-alpha-8298489.gz
        sudo mv -f mihomo-linux-amd64-alpha-8298489 /usr/local/bin/mihomo
        sudo chmod +x /usr/local/bin/mihomo

    - name: Install sing-box
      run: |
        sudo curl -fsSL https://sing-box.app/gpg.key -o /etc/apt/keyrings/sagernet.asc
        sudo chmod a+r /etc/apt/keyrings/sagernet.asc
        echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/sagernet.asc] https://deb.sagernet.org/ * *" | \
        sudo tee /etc/apt/sources.list.d/sagernet.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y sing-box
    
    - name: Pull code from remote
      run: gh repo clone HXHGTS/AzureIPGet
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Format And Compile sing-box srs File
      run: |
        jq '.route | {version: 1, rules: [.rules[] | del(.outbound)]}' ./AzureIPGet/data/AzureIPBlock.json > AzureIPBlockRule.json
        sing-box rule-set compile --output geoip-r6hkonly.srs AzureIPBlockRule.json

    - name: Compile mihomo mrs File
      run: |
        mihomo convert-ruleset ipcidr text ./AzureIPGet/data/ip.txt geoip-r6hkonly.mrs

    - name: Clean
      run: |
        rm -f AzureIPBlockRule.json

    - name: Push Files
      run: |
        sudo mkdir -p geoip
        sudo mv -f geoip-r6hkonly.srs geoip/geoip-r6hkonly.srs
        sudo mv -f geoip-r6hkonly.mrs geoip/geoip-r6hkonly.mrs
        sudo chown -R $USER:$USER geoip
        sudo chmod -R 777 geoip
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add geoip/*.srs
        git add geoip/*.mrs
        git commit -m "Auto Compile telegram geoip source file"
        git push --force origin Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ACTIONS_RUNNER_DEBUG: true
        ACTIONS_STEP_DEBUG: true
      continue-on-error: true

    - name: Create tag
      id: create_tag
      run: |
        TAG_NAME=$(date -u +"%Y%m%d%H%M%S")
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists, deleting it from remote."
          git push --delete origin "$TAG_NAME"
          while git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; do
            echo "Waiting for tag $TAG_NAME to be deleted..."
            sleep 5
          done
        fi
        git tag $TAG_NAME
        git push --force origin $TAG_NAME
        echo "::set-output name=TAG_NAME::$TAG_NAME"

    - name: Create release
      id: create_release
      run: |
        TAG_NAME=${{ steps.create_tag.outputs.TAG_NAME }}
        RELEASE_ID=$(gh release view "$TAG_NAME" --json id --jq '.id' || echo "null")
        if [ "$RELEASE_ID" != "null" ]; then
          echo "Release $TAG_NAME already exists, deleting it."
          gh release delete "$TAG_NAME" --yes
        fi
        gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Auto-generated release for $TAG_NAME" geoip/geoip-r6hkonly.srs geoip/geoip-r6hkonly.mrs
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
